import streamlit as st
import pandas as pd
import random
import io

class SoilModelGeneratorStreamlit:
    def __init__(self):
        self.df = None
        
    def generate_color_triplet(self, num_variants):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å—Ç—Ä–æ–∫–∏"""
        r1 = random.randint(50, 255)
        g1 = random.randint(50, 255)
        b1 = random.randint(50, 255)
        colors = [r1 + g1 * 256 + b1 * 65536]
        
        for i in range(1, num_variants):
            factor = 0.6 + (i * 0.2)
            r = min(int(r1 * factor), 255)
            g = min(int(g1 * factor), 255)
            b = min(int(b1 * factor), 255)
            colors.append(r + g * 256 + b * 65536)
            
        return colors
    
    def round_value(self, value):
        """–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–æ 2 –∑–Ω–∞–∫–æ–≤"""
        try:
            if pd.isna(value):
                return 0
            if isinstance(value, str):
                return value
            return round(float(value), 2)
        except (ValueError, TypeError):
            return value if isinstance(value, str) else 0
    
    def generate_soil_model_file(self, filtered_df, colors_dict, prob, int_flag, e3_flag, e5_flag):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å Soil Model"""
        output_lines = []
        
        for idx, row in filtered_df.iterrows():
            layer_num = str(row.iloc[0]) if pd.notna(row.iloc[0]) else f"Row_{idx}"
            colors = colors_dict[idx]
            color_idx = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            if prob == "0.85":
                phi_col = 5
                c_col = 6
                gamma_unsat_col = 16
            else:  # 0.95
                phi_col = 8
                c_col = 9
                gamma_unsat_col = 18
            
            # –ë–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª
            output_lines.extend([
                '_soilmat "SoilModel" 2',
                f'set SoilMat_1.Identification "MC_{layer_num}"',
                f'_set MC_{layer_num}.Colour {colors[color_idx]}',
                f'_set MC_{layer_num}.gammaUnsat {self.round_value(row.iloc[gamma_unsat_col])}',
                f'_set MC_{layer_num}.gammaSat {self.round_value(row.iloc[13])}',
                f'_set MC_{layer_num}.ERef {self.round_value(row.iloc[10])}',
                f'_set MC_{layer_num}.nu {self.round_value(row.iloc[12])}',
                f'_set MC_{layer_num}.cRef {self.round_value(row.iloc[c_col])}',
                f'_set MC_{layer_num}.phi {self.round_value(row.iloc[phi_col])}',
                f'_set MC_{layer_num}.eInit {self.round_value(row.iloc[21])}'
            ])
            color_idx += 1
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª int
            if int_flag and color_idx < len(colors):
                output_lines.extend([
                    '_soilmat "SoilModel" 2',
                    f'set SoilMat_1.Identification "MC_{layer_num}_int"',
                    f'_set MC_{layer_num}_int.Colour {colors[color_idx]}',
                    f'_set MC_{layer_num}_int.gammaUnsat {self.round_value(row.iloc[gamma_unsat_col])}',
                    f'_set MC_{layer_num}_int.gammaSat {self.round_value(row.iloc[13])}',
                    f'_set MC_{layer_num}_int.ERef {self.round_value(row.iloc[10])}',
                    f'_set MC_{layer_num}_int.nu {self.round_value(row.iloc[12])}',
                    f'_set MC_{layer_num}_int.cRef 1',
                    f'_set MC_{layer_num}_int.phi {self.round_value(row.iloc[31])}',
                    f'_set MC_{layer_num}_int.eInit {self.round_value(row.iloc[21])}'
                ])
                color_idx += 1
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª 3E
            if e3_flag and color_idx < len(colors):
                output_lines.extend([
                    '_soilmat "SoilModel" 2',
                    f'set SoilMat_1.Identification "MC_{layer_num}_3E"',
                    f'_set MC_{layer_num}_3E.Colour {colors[color_idx]}',
                    f'_set MC_{layer_num}_3E.gammaUnsat {self.round_value(row.iloc[gamma_unsat_col])}',
                    f'_set MC_{layer_num}_3E.gammaSat {self.round_value(row.iloc[13])}',
                    f'_set MC_{layer_num}_3E.ERef {self.round_value(row.iloc[30])}',
                    f'_set MC_{layer_num}_3E.nu 0.2',
                    f'_set MC_{layer_num}_3E.cRef {self.round_value(row.iloc[c_col])}',
                    f'_set MC_{layer_num}_3E.phi {self.round_value(row.iloc[phi_col])}',
                    f'_set MC_{layer_num}_3E.eInit {self.round_value(row.iloc[21])}'
                ])
                color_idx += 1
            
            # –ú–∞—Ç–µ—Ä–∏–∞–ª 5E
            if e5_flag and color_idx < len(colors):
                output_lines.extend([
                    '_soilmat "SoilModel" 2',
                    f'set SoilMat_1.Identification "MC_{layer_num}_5E"',
                    f'_set MC_{layer_num}_5E.Colour {colors[color_idx]}',
                    f'_set MC_{layer_num}_5E.gammaUnsat {self.round_value(row.iloc[gamma_unsat_col])}',
                    f'_set MC_{layer_num}_5E.gammaSat {self.round_value(row.iloc[13])}',
                    f'_set MC_{layer_num}_5E.ERef {self.round_value(row.iloc[29])}',
                    f'_set MC_{layer_num}_5E.nu 0.2',
                    f'_set MC_{layer_num}_5E.cRef {self.round_value(row.iloc[c_col])}',
                    f'_set MC_{layer_num}_5E.phi {self.round_value(row.iloc[phi_col])}',
                    f'_set MC_{layer_num}_5E.eInit {self.round_value(row.iloc[21])}'
                ])
        
        return "\n".join(output_lines)
    
    def generate_sba_file(self, filtered_df):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è .sba —Ñ–∞–π–ª–∞"""
        output_lines = [str(len(filtered_df))]
        
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ AS:AY (–∏–Ω–¥–µ–∫—Å—ã 44-50)
        as_ay_indices = [i for i in range(44, 51) if i < len(filtered_df.columns)]
        
        if as_ay_indices:
            for col_idx in as_ay_indices:
                for idx, row in filtered_df.iterrows():
                    value = self.round_value(row.iloc[col_idx])
                    output_lines.append(str(value))
            
            return "\n".join(output_lines)
        else:
            return None

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Soil Model", page_icon="üé®", layout="wide")
    
    st.title("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä Soil Model")
    st.markdown("---")
    
    generator = SoilModelGeneratorStreamlit()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª", type=['xlsx', 'xls'])
    
    if uploaded_file is not None:
        try:
            generator.df = pd.read_excel(uploaded_file, header=2)
            st.success(f"‚úÖ –§–∞–π–ª '{uploaded_file.name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–ª–±—Ü–∞—Ö
            with st.expander("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö"):
                st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(generator.df)}")
                st.write("–°—Ç–æ–ª–±—Ü—ã:", list(generator.df.columns))
            
            # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            st.subheader("üéØ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
            
            col1, col2 = st.columns(2)
            
            with col1:
                prob_value = st.radio("–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:", ['0.85', '0.95'], index=0)
            
            with col2:
                st.write("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:")
                int_flag = st.checkbox("int")
                e3_flag = st.checkbox("3E")
                e5_flag = st.checkbox("5E")
                wall_flag = st.checkbox("Wall")
            
            # –í—ã–±–æ—Ä –≥—Ä—É–Ω—Ç–æ–≤
            st.subheader("üèóÔ∏è –í—ã–±–æ—Ä –≥—Ä—É–Ω—Ç–æ–≤")
            
            if 'selected_soils' not in st.session_state:
                st.session_state.selected_soils = []
            
            # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–Ω—Ç–æ–≤
            selected_indices = []
            for idx, row in generator.df.iterrows():
                layer_num = str(row.iloc[0]) if pd.notna(row.iloc[0]) else f"Row_{idx}"
                if st.checkbox(f"–ì—Ä—É–Ω—Ç {layer_num}", key=f"soil_{idx}"):
                    selected_indices.append(idx)
            
            # –ö–Ω–æ–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            if st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã", type="primary"):
                if not selected_indices:
                    st.error("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–Ω—Ç–∞!")
                    return
                
                # –°–æ–∑–¥–∞–µ–º —É–º–µ–Ω—å—à–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
                filtered_df = generator.df.iloc[selected_indices].copy()
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
                colors_dict = {}
                for idx in filtered_df.index:
                    num_colors = 1
                    if int_flag: num_colors += 1
                    if e3_flag: num_colors += 1
                    if e5_flag: num_colors += 1
                    colors_dict[idx] = generator.generate_color_triplet(num_colors)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
                soil_model_content = generator.generate_soil_model_file(
                    filtered_df, colors_dict, prob_value, int_flag, e3_flag, e5_flag
                )
                
                # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å Soil Model —Ñ–∞–π–ª",
                    data=soil_model_content,
                    file_name="soil_model_output.txt",
                    mime="text/plain"
                )
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º .sba —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if wall_flag:
                    sba_content = generator.generate_sba_file(filtered_df)
                    if sba_content:
                        st.download_button(
                            label="üì• –°–∫–∞—á–∞—Ç—å Wall Data (.sba)",
                            data=sba_content,
                            file_name="wall_data.sba",
                            mime="text/plain"
                        )
                    else:
                        st.warning("‚ùå –°—Ç–æ–ª–±—Ü—ã AS:AY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö!")
                
                st.success("‚úÖ –§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                with st.expander("üëÄ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä Soil Model —Ñ–∞–π–ª–∞"):
                    st.code(soil_model_content[:2000] + "..." if len(soil_model_content) > 2000 else soil_model_content)
                        
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
    else:
        st.info("üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")

if __name__ == "__main__":
    main()